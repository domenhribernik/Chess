@using System.Timers;
@using Microsoft.AspNetCore.Components

<div class="clock">
	<span>@minutes</span>m
	<span>@seconds</span>s
</div>

<span hidden="@showSpan" class="times-up">Time has run out!</span>

@code {
	private Timer timer = new Timer(1000);
	private int seconds = 0;
	private int minutes = 10;
	private bool stopped = true;
	private bool showSpan = true;

	[Parameter]
	public EventCallback TimesUp { get; set; }

	void TimeIsUp()
	{
		showSpan = false;
		InvokeAsync(StateHasChanged);
		TimesUp.InvokeAsync(null);
	}

	protected override async Task OnInitializedAsync()
	{
		timer.Elapsed += (sender, EventArgs) => CountDown();
		await base.OnInitializedAsync();
	}

	void CountDown()
	{
		seconds--;
		if (seconds == -1)
		{
			minutes--;
			seconds = 59;
		}
		if (minutes == 0 && seconds == 0)
		{
			timer.Stop();
			TimeIsUp();
		}
		InvokeAsync(StateHasChanged);
	}

	public void startOrStopTimer()
	{
		if (stopped)
			timer.Start();
		else
			timer.Stop();
		stopped = !stopped;
	}

	public void SetRapid()
	{
		minutes = 10;
		InvokeAsync(StateHasChanged);
	}

	public void SetBlitz()
	{
		minutes = 5;
		InvokeAsync(StateHasChanged);
	}

	public void SetBullet()
	{
		minutes = 1;
		InvokeAsync(StateHasChanged);
	}
}