@inject NavigationManager navigationManager
@using ChessProject.Data
@using ChessProject.PiecesData

<div>
    @if (!playing)
    {
        <button hidden="@hideButton" class="play-btn" @onclick="@Play">Play</button>
    }
</div>

<style>
    .play-btn {
        height: 100px;
        width: 200px;
        border: none;
        color: white;
        background-color: green;
        font-size: 2rem;
    }
</style>

@for (int i = 0; i < 8; i++)
{
    int localI = i;
    <div class="row">
        @for (int j = 0; j < 8; j++)
        { //tukaj se lahko dodajo ostale figure
            int localJ = j;
            var pawn = blackPawns.FirstOrDefault(n => n.Column == j && n.Row == i);
            var rook = blackRooks.FirstOrDefault(n => n.Column == j && n.Row == i);
            var bishop = blackBishops.FirstOrDefault(n => n.Column == j && n.Row == i);
            var knight = blackKnights.FirstOrDefault(n => n.Column == j && n.Row == i);
            var queen = blackQueen.FirstOrDefault(n => n.Column == j && n.Row == i);
            var king = blackKing.FirstOrDefault(n => n.Column == j && n.Row == i);
            if (pawn == null)
            {
                pawn = whitePawns.FirstOrDefault(n => n.Column == j && n.Row == i);
            }
            if (rook == null)
            {
                rook = whiteRooks.FirstOrDefault(n => n.Column == j && n.Row == i);
            }
            if (bishop == null)
            {
                bishop = whiteBishops.FirstOrDefault(n => n.Column == j && n.Row == i);
            }
            if (knight == null)
            {
                knight = whiteKnights.FirstOrDefault(n => n.Column == j && n.Row == i);
            }
            if (queen == null)
            {
                queen = whiteQueen.FirstOrDefault(n => n.Column == j && n.Row == i);
            }
            if (king == null)
            {
                king = whiteKing.FirstOrDefault(n => n.Column == j && n.Row == i);
            }

            bool canMoveHere = cellsPossible.Contains((i, j));

            <div @onclick="() => MovePiece(localI, localJ)" class="cell @(canMoveHere ? "active" : "")">

                @if (pawn != null)
                {
                    <div @onclick="() => { PieceClicked(pawn); }"
                        class="pawn @pawn.Color @(pawn == activePiece ? "active" : "")">

                        @if (pawn.Color == "black")
                        {
                            <img class="board-piece" src="/pictures/black_pawn.svg" />
                        }
                        else
                        {
                            <img class="board-piece" src="/pictures/white_pawn.svg" />
                        }
                    </div>
                }

                @if (rook != null)
                {
                    <div @onclick="() => { PieceClicked(rook); }"
                        class="rook @rook.Color @(rook == activePiece ? "active" : "")">

                        @if (rook.Color == "black")
                        {
                            <img class="board-piece" src="/pictures/black_rook.svg" />
                        }
                        else if (rook.Color == "white")
                        {
                            <img class="board-piece" src="/pictures/white_rook.svg" />
                        }
                    </div>
                }

                @if (bishop != null)
                {
                    <div @onclick="() => { PieceClicked(bishop); }"
                        class="bishop @bishop.Color @(bishop == activePiece ? "active" : "")">

                        @if (bishop.Color == "black")
                        {
                            <img class="board-piece" src="/pictures/black_bishop.svg" />
                        }
                        else if (bishop.Color == "white")
                        {
                            <img class="board-piece" src="/pictures/white_bishop.svg" />
                        }
                    </div>
                }

                @if (knight != null)
                {
                    <div @onclick="() => { PieceClicked(knight); }"
                        class="knight @knight.Color @(knight == activePiece ? "active" : "")">

                        @if (knight.Color == "black")
                        {
                            <img class="board-piece" src="/pictures/black_knight.svg" />
                        }
                        else if (knight.Color == "white")
                        {
                            <img class="board-piece" src="/pictures/white_knight.svg" />
                        }
                    </div>
                }

                @if (queen != null)
                {
                    <div @onclick="() => { PieceClicked(queen); }"
                        class="queen @queen.Color @(queen == activePiece ? "active" : "")">

                        @if (queen.Color == "black")
                        {
                            <img class="board-piece" src="/pictures/black_queen.svg" />
                        }
                        else if (queen.Color == "white")
                        {
                            <img class="board-piece" src="/pictures/white_queen.svg" />
                        }
                    </div>
                }

                @if (king != null)
                {
                    <div @onclick="() => { PieceClicked(king); }"
                        class="king @king.Color @(king == activePiece ? "active" : "")">

                        @if (king.Color == "black")
                        {
                            <img class="board-piece" src="/pictures/black_king.svg" />
                        }
                        else if (king.Color == "white")
                        {
                            <img class="board-piece" src="/pictures/white_king.svg" />
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    Multiplayer mplayer = null;
    bool hideButton = false;
    bool playing = false;

    async Task Play()
    {
        try
        {
            mplayer = new Multiplayer(navigationManager);
            mplayer.CoordinatesReceived += ReceiveCoordinates;
            await mplayer.StartAsync();
            playing = true;
            hideButton = true;
        }
        catch (Exception e)
        {
            string message = $"ERROR: failed to start chat {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    void ReceiveCoordinates(object sender, CoordinatesReceivedEventArgs e)
    {
        if (myTurn == true)
        {
            myTurn = false;
            Console.WriteLine("Receive test");
            Console.WriteLine("Active piece row: " + e.Row);
            Console.WriteLine("Active piece column: " + e.Column);
            cellsPossible.Add((e.Row, e.Column));
            var piece = whitePieces.FirstOrDefault(n => n.Row == e.ActivePiece.Row && n.Column == e.ActivePiece.Column);
            if (piece == null)
            {
                piece = blackPieces.FirstOrDefault(n => n.Row == e.ActivePiece.Row && n.Column == e.ActivePiece.Column);
            }
            activePiece = piece;
            MovePiece(e.Row, e.Column);
            InvokeAsync(StateHasChanged);
        }
    }

    async Task SendAsync(PieceData movePiece, int row, int column)
    {
        await mplayer.SendAsyncCoordinates(movePiece, row, column);
        Console.WriteLine("Send test");
    }

    //list, ki bo imel liste vseh figur
    List<PieceData> piecesList = new List<PieceData>();

    //v teh dveh seznamih so listi figur po barvah
    List<PieceData> whitePieces = new List<PieceData>();
    List<PieceData> blackPieces = new List<PieceData>();

    //kmeti
    List<PieceData> whitePawns = new List<PieceData>();
    List<PieceData> blackPawns = new List<PieceData>();

    //trdnjave
    List<PieceData> whiteRooks = new List<PieceData>();
    List<PieceData> blackRooks = new List<PieceData>();

    //strelci
    List<PieceData> whiteBishops = new List<PieceData>();
    List<PieceData> blackBishops = new List<PieceData>();

    //konji
    List<PieceData> whiteKnights = new List<PieceData>();
    List<PieceData> blackKnights = new List<PieceData>();

    //kraljici
    List<PieceData> whiteQueen = new List<PieceData>();
    List<PieceData> blackQueen = new List<PieceData>();

    //kralja
    List<PieceData> whiteKing = new List<PieceData>();
    List<PieceData> blackKing = new List<PieceData>();

    string black = "black";
    string white = "white";
    bool whiteTurn = true;
    bool myTurn = true;
    int moveCount = 0;

    bool blackHasChess = false; //crni je v Å¡ahu
    bool whiteHasChess = false;

    //za izpis vrst bi lahko dodav kao ascii znak 55 da bi bla crka in st.
    protected override void OnInitialized()
    {
        //kmeti
        for (int i = 0; i < 8; i++)
        {
            blackPawns.Add(new PieceData
                {
                    Color = "black",
                    Column = i,
                    Row = 1,
                    Direction = Direction.Down,
                    Type = PiecesData.Type.Pawn
                });

            blackPieces.Add(blackPawns[i]);
        }

        for (int i = 0; i < 8; i++)
        {
            whitePawns.Add(new PieceData
                {
                    Color = "white",
                    Column = i,
                    Row = 6,
                    Direction = Direction.Up,
                    Type = PiecesData.Type.Pawn
                });

            whitePieces.Add(whitePawns[i]);
        }

        //trdnjave
        for (int i = 0; i < 8; i += 7)
        {
            blackRooks.Add(new PieceData
                {
                    Color = "black",
                    Column = i,
                    Row = 0,
                    Direction = Direction.Straight,
                    Type = PiecesData.Type.Rook
                });
        }

        for (int i = 0; i < 8; i += 7)
        {
            whiteRooks.Add(new PieceData
                {
                    Color = "white",
                    Column = i,
                    Row = 7,
                    Direction = Direction.Straight,
                    Type = PiecesData.Type.Rook
                });
        }

        //konji
        for (int i = 1; i < 7; i += 5)
        {
            blackKnights.Add(new PieceData
                {
                    Color = "black",
                    Column = i,
                    Row = 0,
                    Direction = Direction.LShape,
                    Type = PiecesData.Type.Knight
                });
        }

        for (int i = 1; i < 7; i += 5)
        {
            whiteKnights.Add(new PieceData
                {
                    Color = "white",
                    Column = i,
                    Row = 7,
                    Direction = Direction.LShape,
                    Type = PiecesData.Type.Knight
                });
        }

        for (int i = 2; i < 6; i += 3)
        {
            blackBishops.Add(new PieceData
                {
                    Color = "black",
                    Column = i,
                    Row = 0,
                    Direction = Direction.Diagonally,
                    Type = PiecesData.Type.Bishop
                });
        }

        for (int i = 2; i < 6; i += 3)
        {
            whiteBishops.Add(new PieceData
                {
                    Color = "white",
                    Column = i,
                    Row = 7,
                    Direction = Direction.Diagonally,
                    Type = PiecesData.Type.Bishop
                });
        }

        for (int i = 0; i < 2; i++)
        {
            blackPieces.Add(blackRooks[i]);
            whitePieces.Add(whiteRooks[i]);

            blackPieces.Add(blackBishops[i]);
            whitePieces.Add(whiteBishops[i]);

            blackPieces.Add(blackKnights[i]);
            whitePieces.Add(whiteKnights[i]);
        }

        //kraljici
        blackQueen.Add(new PieceData
            {
                Color = "black",
                Column = 3,
                Row = 0,
                Direction = Direction.Any,
                Type = PiecesData.Type.Queen
            });

        blackPieces.Add(blackQueen[0]);

        whiteQueen.Add(new PieceData
            {
                Color = "white",
                Column = 3,
                Row = 7,
                Direction = Direction.Any,
                Type = PiecesData.Type.Queen
            });

        whitePieces.Add(whiteQueen[0]);

        //kralja
        blackKing.Add(new PieceData
            {
                Color = "black",
                Column = 4,
                Row = 0,
                Direction = Direction.OneAny,
                Type = PiecesData.Type.King
            });

        blackPieces.Add(blackKing[0]);

        whiteKing.Add(new PieceData
            {
                Color = "white",
                Column = 4,
                Row = 7,
                Direction = Direction.OneAny,
                Type = PiecesData.Type.King
            });

        whitePieces.Add(whiteKing[0]);
    }

    PieceData activePiece1 = null;
    bool canWhiteQueenSideCastle = true;
    bool canWhiteKingSideCastle = true;
    bool canBlackQueenSideCastle = true;
    bool canBlackKingSideCastle = true;
    bool whiteEnPassant = false;
    bool blackEnPassant = false;
    bool enPassantTakes = false;
    int enPassantColumn = 10;

    List<(int row, int column)> cellsPossible = new();

    //preveri kam lahko gre
    void CheckDirections(PieceData activePiece)
    {
        cellsPossible.Clear();

        if (activePiece != null)
        {
            // premiki in jemanje za kmete
            if (activePiece.Type == PiecesData.Type.Pawn)
            {
                // diagonalno jemanje
                if (activePiece.Color == black)
                {
                    if (IfFigureExists(activePiece.Row + 1, activePiece.Column - 1))
                    {
                        var whitePiece = whitePieces.FirstOrDefault(n => n.Row == activePiece.Row + 1 && n.Column == activePiece.Column - 1);
                        if (whitePiece != null)//&& !checkIfChessCoordinates(activePiece.Row + 1, activePiece.Column - 1)
                        {
                            cellsPossible.Add((activePiece.Row + 1, activePiece.Column - 1));
                        }
                    }
                    if (IfFigureExists(activePiece.Row + 1, activePiece.Column + 1))
                    {
                        var whitePiece = whitePieces.FirstOrDefault(n => n.Row == activePiece.Row + 1 && n.Column == activePiece.Column + 1);
                        if (whitePiece != null)//&& !checkIfChessCoordinates(activePiece.Row + 1, activePiece.Column + 1)
                        {
                            cellsPossible.Add((activePiece.Row + 1, activePiece.Column + 1));
                        }
                    }

                    // en passant - crni
                    if (IfFigureExists(4, activePiece.Column - 1) && activePiece.Row == 4 && activePiece.Column == enPassantColumn + 1 && blackEnPassant)
                    {
                        var whitePiece = whitePieces.FirstOrDefault(n => n.Row == activePiece.Row && n.Column == activePiece.Column - 1);
                        Console.WriteLine("En passant column = " + enPassantColumn + ", activeColumn = " + activePiece.Column);
                        if (whitePiece != null)
                        {
                            cellsPossible.Add((activePiece.Row + 1, activePiece.Column - 1));
                        }
                    }
                    if (IfFigureExists(4, activePiece.Column + 1) && activePiece.Row == 4 && activePiece.Column == enPassantColumn - 1 && blackEnPassant)
                    {
                        var whitePiece = whitePieces.FirstOrDefault(n => n.Row == activePiece.Row && n.Column == activePiece.Column + 1);
                        Console.WriteLine("En passant column = " + enPassantColumn + ", activeColumn = " + activePiece.Column);
                        if (whitePiece != null)
                        {
                            cellsPossible.Add((activePiece.Row + 1, activePiece.Column + 1));
                        }
                    }
                    //1 polje naprej premakne
                    AddIfFigureNotExists(activePiece.Row + 1, activePiece.Column);
                }
                else
                {
                    if (IfFigureExists(activePiece.Row - 1, activePiece.Column - 1))
                    {
                        var blackPiece = blackPieces.FirstOrDefault(n => n.Row == activePiece.Row - 1 && n.Column == activePiece.Column - 1);
                        if (blackPiece != null)//&& !checkIfChessCoordinates(activePiece.Row - 1, activePiece.Column - 1)
                        {
                            cellsPossible.Add((activePiece.Row - 1, activePiece.Column - 1));
                        }
                    }
                    if (IfFigureExists(activePiece.Row - 1, activePiece.Column + 1))
                    {
                        var blackPiece = blackPieces.FirstOrDefault(n => n.Row == activePiece.Row - 1 && n.Column == activePiece.Column + 1);
                        if (blackPiece != null)//&& !checkIfChessCoordinates(activePiece.Row - 1, activePiece.Column + 1)
                        {
                            cellsPossible.Add((activePiece.Row - 1, activePiece.Column + 1));
                        }
                    }

                    // en passant - beli
                    if (IfFigureExists(3, activePiece.Column - 1) && activePiece.Row == 3 && activePiece.Column == enPassantColumn + 1 && whiteEnPassant)
                    {
                        var blackPiece = blackPieces.FirstOrDefault(n => n.Row == activePiece.Row && n.Column == activePiece.Column - 1);
                        Console.WriteLine("BELI En passant column = " + enPassantColumn + ", activeColumn = " + activePiece.Column);
                        if (blackPiece != null)
                        {
                            cellsPossible.Add((activePiece.Row - 1, activePiece.Column - 1));
                        }
                    }
                    if (IfFigureExists(3, activePiece.Column + 1) && activePiece.Row == 3 && activePiece.Column == enPassantColumn - 1 && whiteEnPassant)
                    {
                        var blackPiece = blackPieces.FirstOrDefault(n => n.Row == activePiece.Row && n.Column == activePiece.Column + 1);
                        Console.WriteLine("BELI En passant column = " + enPassantColumn + ", activeColumn = " + activePiece.Column);
                        if (blackPiece != null)
                        {
                            cellsPossible.Add((activePiece.Row - 1, activePiece.Column + 1));
                        }
                    }
                    //1 polje naprej premakne
                    AddIfFigureNotExists(activePiece.Row - 1, activePiece.Column);
                }

                //za 2 polja naprej na zacetku premakne
                if ((activePiece.Row == 1) && (activePiece.Color == black) && (!IfFigureExists(2, activePiece.Column)))
                {
                    AddIfFigureNotExists(3, activePiece.Column);
                }
                else if ((activePiece.Row == 6) && (activePiece.Color == white) && (!IfFigureExists(5, activePiece.Column)))
                {
                    AddIfFigureNotExists(4, activePiece.Column);
                }
            }

            //premik za 1-7 polj gor, dol, levo, desno, poje ce treba
            if ((activePiece.Type == PiecesData.Type.Rook) || (activePiece.Type == PiecesData.Type.Queen) || (activePiece.Type == PiecesData.Type.King))
            {
                MoveInLine(0, 1);
                MoveInLine(0, -1);
                MoveInLine(1, 0);
                MoveInLine(-1, 0);
            }

            //diagonalni premik za 1-7 polj, poje ce treba
            if ((activePiece.Type == PiecesData.Type.Bishop) || (activePiece.Type == PiecesData.Type.Queen) || (activePiece.Type == PiecesData.Type.King))
            {
                MoveInLine(1, 1);
                MoveInLine(1, -1);
                MoveInLine(-1, 1);
                MoveInLine(-1, -1);
            }

            // Premik L - konj, poje ce treba
            if (activePiece.Type == PiecesData.Type.Knight)
            {
                if ((!IfFigureExists(activePiece.Row + 2, activePiece.Column - 1) || (IfBlackFigureExists(activePiece.Row + 2, activePiece.Column - 1) && whiteTurn) || (IfWhiteFigureExists(activePiece.Row + 2, activePiece.Column - 1) && !whiteTurn)))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row + 2, activePiece.Column - 1);
                }
                if ((!IfFigureExists(activePiece.Row + 2, activePiece.Column + 1) || (IfBlackFigureExists(activePiece.Row + 2, activePiece.Column + 1) && whiteTurn) || (IfWhiteFigureExists(activePiece.Row + 2, activePiece.Column + 1) && !whiteTurn)))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row + 2, activePiece.Column + 1);
                }
                if ((!IfFigureExists(activePiece.Row + 1, activePiece.Column - 2) || (IfBlackFigureExists(activePiece.Row + 1, activePiece.Column - 2) && whiteTurn) || (IfWhiteFigureExists(activePiece.Row + 1, activePiece.Column - 2) && !whiteTurn)))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row + 1, activePiece.Column - 2);
                }
                if ((!IfFigureExists(activePiece.Row + 1, activePiece.Column + 2) || (IfBlackFigureExists(activePiece.Row + 1, activePiece.Column + 2) && whiteTurn) || (IfWhiteFigureExists(activePiece.Row + 1, activePiece.Column + 2) && !whiteTurn)))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row + 1, activePiece.Column + 2);
                }
                if ((!IfFigureExists(activePiece.Row - 1, activePiece.Column - 2) || (IfBlackFigureExists(activePiece.Row - 1, activePiece.Column - 2) && whiteTurn) || (IfWhiteFigureExists(activePiece.Row - 1, activePiece.Column - 2) && !whiteTurn)))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row - 1, activePiece.Column - 2);
                }
                if ((!IfFigureExists(activePiece.Row - 1, activePiece.Column + 2) || (IfBlackFigureExists(activePiece.Row - 1, activePiece.Column + 2) && whiteTurn) || (IfWhiteFigureExists(activePiece.Row - 1, activePiece.Column + 2) && !whiteTurn)))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row - 1, activePiece.Column + 2);
                }
                if ((!IfFigureExists(activePiece.Row - 2, activePiece.Column - 1) || (IfBlackFigureExists(activePiece.Row - 2, activePiece.Column - 1) && whiteTurn) || (IfWhiteFigureExists(activePiece.Row - 2, activePiece.Column - 1) && !whiteTurn)))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row - 2, activePiece.Column - 1);
                }
                if ((!IfFigureExists(activePiece.Row - 2, activePiece.Column + 1) || (IfBlackFigureExists(activePiece.Row - 2, activePiece.Column + 1) && whiteTurn) || (IfWhiteFigureExists(activePiece.Row - 2, activePiece.Column + 1) && !whiteTurn)))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row - 2, activePiece.Column + 1);
                }
            }

            // rosada na kraljicini strani - beli
            if (activePiece.Type == PiecesData.Type.King && whiteTurn && canWhiteQueenSideCastle)
            {
                if (!IfFigureExists(activePiece.Row, activePiece.Column - 1) && !IfFigureExists(activePiece.Row, activePiece.Column - 2) && !IfFigureExists(activePiece.Row, activePiece.Column - 3))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row, activePiece.Column - 2);
                }
            }

            // rosada na kraljevi strani - beli
            if (activePiece.Type == PiecesData.Type.King && whiteTurn && canWhiteKingSideCastle)
            {
                if (!IfFigureExists(activePiece.Row, activePiece.Column + 1) && !IfFigureExists(activePiece.Row, activePiece.Column + 2))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row, activePiece.Column + 2);
                }
            }

            // rosada na kraljicini strani - crni
            if (activePiece.Type == PiecesData.Type.King && !whiteTurn && canBlackQueenSideCastle)
            {
                if (!IfFigureExists(activePiece.Row, activePiece.Column - 1) && !IfFigureExists(activePiece.Row, activePiece.Column - 2) && !IfFigureExists(activePiece.Row, activePiece.Column - 3))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row, activePiece.Column - 2);
                }
            }

            // rosada na kraljevi strani - crni
            if (activePiece.Type == PiecesData.Type.King && !whiteTurn && canBlackKingSideCastle)
            {
                if (!IfFigureExists(activePiece.Row, activePiece.Column + 1) && !IfFigureExists(activePiece.Row, activePiece.Column + 2))
                {
                    AddIfSameColorNotExists(activePiece, activePiece.Row, activePiece.Column + 2);
                }
            }
        }
    }

    bool checkIfChess()
    {
        blackHasChess = false;
        whiteHasChess = false;

        //ce ima crni sah
        for (int i = 0; i < whitePieces.Count; i++)
        {
            if (blackHasChess)
            {
                break;
            }

            PieceData activeHolder;
            activeHolder = whitePieces[i];
            if (!(activeHolder.Type == PiecesData.Type.King))
            {
                CheckDirections(activeHolder);
                for (int j = 0; j < cellsPossible.Count; j++)
                {
                    // tu vrze izjemo ce probas pojest kralja
                    if ((cellsPossible[j].row == blackKing[0].Row) && (cellsPossible[j].column == blackKing[0].Column))
                    {
                        blackHasChess = true;
                        Console.WriteLine("Crni mas sah!");
                        break;
                    }
                }
            }
        }

        //ce ima beli sah
        for (int i = 0; i < blackPieces.Count; i++)
        {
            if (whiteHasChess)
            {
                break;
            }

            PieceData activeHolder;
            activeHolder = blackPieces[i];
            if (!(activeHolder.Type == PiecesData.Type.King))
            {
                CheckDirections(activeHolder);
                for (int j = 0; j < cellsPossible.Count; j++)
                {
                    if ((cellsPossible[j].row == whiteKing[0].Row) && (cellsPossible[j].column == whiteKing[0].Column))
                    {
                        whiteHasChess = true;
                        Console.WriteLine("Beli mas sah!");
                        break;
                    }
                }
            }
        }

        if ((whiteTurn && whiteHasChess) || (!whiteTurn && blackHasChess))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    bool checkIfChessCoordinates(int row, int column)
    {
        blackHasChess = false;
        whiteHasChess = false;

        //ce ima crni sah
        if (!whiteTurn)
        {
            if (activePiece1.Type == PiecesData.Type.King)
            {
                for (int i = 0; i < whitePieces.Count; i++)
                {
                    if (blackHasChess)
                    {
                        break;
                    }

                    PieceData activeHolder;
                    activeHolder = whitePieces[i];
                    if (!(activeHolder.Type == PiecesData.Type.King))
                    {
                        CheckDirections(activeHolder);
                        for (int j = 0; j < cellsPossible.Count; j++)
                        {
                            if ((cellsPossible[j].row == row) && (cellsPossible[j].column == column))
                            {
                                blackHasChess = true;
                                Console.WriteLine("Crni mas sah!");
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                int rowHolder = activePiece1.Row;
                int columnHolder = activePiece1.Column;
                activePiece1.Row = row;
                activePiece1.Column = column;
                if (checkIfChess())
                {
                    activePiece1.Row = rowHolder;
                    activePiece1.Column = columnHolder;
                    return true;
                }

                activePiece1.Row = rowHolder;
                activePiece1.Column = columnHolder;
                return false;
            }

        }

        if (whiteTurn)
        {
            //ce ima beli sah
            if (activePiece1.Type == PiecesData.Type.King)
            {
                foreach (var i in blackPieces)
                {
                    if (whiteHasChess)
                    {
                        break;
                    }

                    PieceData activeHolder;
                    activeHolder = i;
                    if (!(activeHolder.Type == PiecesData.Type.King))
                    {
                        CheckDirections(activeHolder);
                        foreach (var j in cellsPossible)
                        {
                            if ((j.row == row) && (j.column == column))
                            {
                                whiteHasChess = true;
                                Console.WriteLine("Beli mas sah!");
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                int rowHolder = activePiece1.Row;
                int columnHolder = activePiece1.Column;
                activePiece1.Row = row;
                activePiece1.Column = column;
                if (checkIfChess())
                {
                    activePiece1.Row = rowHolder;
                    activePiece1.Column = columnHolder;
                    return true;
                }
                activePiece1.Row = rowHolder;
                activePiece1.Column = columnHolder;
                return false;
            }
        }

        if ((whiteTurn && whiteHasChess) || (!whiteTurn && blackHasChess))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    void removeNotPossibleCells()
    {
        List<(int row, int column)> cellsToRemove = new();
        List<(int row, int column)> celPosHolder = new();

        celPosHolder = cellsPossible.ToList();
        int cellCount = cellsPossible.Count;
        foreach (var f in celPosHolder.ToList())
        {
            
            if (checkIfChessCoordinates(f.row, f.column))
            {
                //Console.WriteLine("Problem: " + tmpList[f].row + " : " + tmpList[f].column);
                cellsToRemove.Add(f);//(celPosHolder[f].row, celPosHolder[f].column)
            }
        }

        CheckDirections(activePiece1);

        foreach (var i in cellsPossible.ToList())
        {
            foreach (var j in cellsToRemove.ToList())
            {
                if (i == j)
                {
                    //Console.WriteLine("REMOVE IT!!!");
                    cellsPossible.Remove(j);
                    break;
                }
            }
        }

    }

    bool IfFigureExists(int row, int column)
    {
        var blackPiece = blackPieces.FirstOrDefault(n => n.Column == column && n.Row == row);
        var whitePiece = whitePieces.FirstOrDefault(n => n.Column == column && n.Row == row);

        if ((blackPiece == null) && (whitePiece == null))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    bool IfWhiteFigureExists(int row, int column)
    {
        var blackPiece = blackPieces.FirstOrDefault(n => n.Column == column && n.Row == row);
        var whitePiece = whitePieces.FirstOrDefault(n => n.Column == column && n.Row == row);

        if ((blackPiece == null) && (whitePiece != null))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    bool IfBlackFigureExists(int row, int column)
    {
        var blackPiece = blackPieces.FirstOrDefault(n => n.Column == column && n.Row == row);
        var whitePiece = whitePieces.FirstOrDefault(n => n.Column == column && n.Row == row);

        if ((blackPiece != null) && (whitePiece == null))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    void AddIfFigureNotExists(int row, int column)
    {
        if (!IfFigureExists(row, column))//&& !checkIfChessCoordinates(row, column)
        {
            cellsPossible.Add((row, column));
        }
    }

    void AddIfSameColorNotExists(PieceData activePiece, int row, int column)
    {
        if ((activePiece.Color == white) && !IfWhiteFigureExists(row, column))//&& !checkIfChessCoordinates(row, column)
        {
            cellsPossible.Add((row, column));
        }
        else if ((activePiece.Color == black) && !IfBlackFigureExists(row, column))//&& !checkIfChessCoordinates(row, column)
        {
            cellsPossible.Add((row, column));
        }
    }

    // vkljuceni funkciji startOrStopTimer() iz Clock komponente
    [Parameter]
    public EventCallback StartOrStopBlackTimer { get; set; }
    [Parameter]
    public EventCallback StartOrStopWhiteTimer { get; set; }

    // dogodek, ki onemogoci spreminjanje game modea po prvem premiku figure
    [Parameter]
    public EventCallback FirstMove { get; set; }

    //premika
    public void MovePiece(int row, int column)
    {
        //removeNotPossibleCells();
        bool canMoveHere = cellsPossible.Contains((row, column));

        if (!canMoveHere)
        {
            return;
        }

        if (activePiece1 != null)
        {
            if (myTurn)
            {
                myTurn = false;
                PieceData sendPiece = new PieceData();
                sendPiece.Color = activePiece1.Color;
                sendPiece.Type = activePiece1.Type;
                sendPiece.Row = activePiece1.Row;
                sendPiece.Column = activePiece1.Column;
                sendPiece.Direction = activePiece1.Direction;
                SendAsync(sendPiece, row, column);
                System.Threading.Thread.Sleep(100);
            }

            myTurn = true;
            /*
            if (activePiece1.Type == PiecesData.Type.Pawn) {
                // Pregledovanje, ce je mozno izvesti en passant
                if (!IfFigureExists(row, column) && whiteEnPassant && row == 2 && (column == activePiece1.Column -1 || column == activePiece1.Column + 1))
                {
                    var blackPawn = blackPieces.FirstOrDefault(n => n.Row == row + 1 && n.Column == column);
                    if (blackPawn != null)
                    {
                        blackPawns.Remove(blackPawn);
                        blackPieces.Remove(blackPawn);
                    }
                    whiteEnPassant = false;
                    blackEnPassant = false;
                }
                else if (!IfFigureExists(row, column) && blackEnPassant && row == 5 && (column == activePiece.Column - 1 || column == activePiece.Column + 1))
                {
                    var whitePawn = whitePieces.FirstOrDefault(n => n.Row == row - 1 && n.Column == column);
                    if (whitePawn != null) {
                        whitePawns.Remove(whitePawn);
                        whitePieces.Remove(whitePawn);
                    }
                    blackEnPassant = false;
                    whiteEnPassant = false;
                }

                if (!IfWhiteFigureExists(row, column) && activePiece1.Color == white && row == 0)
                {
                    activePiece1.Type = PiecesData.Type.Queen;
                    whiteQueen.Add(activePiece1);
                    var whitePawn = whitePieces.FirstOrDefault(n => n.Row == activePiece1.Row && n.Column == activePiece1.Column);
                    whitePawns.Remove(whitePawn);
                }
                else if (!IfWhiteFigureExists(row, column) && activePiece.Color == black && row == 7)
                {
                    activePiece.Type = PiecesData.Type.Queen;
                    blackQueen.Add(activePiece);
                    var blackPawn = blackPieces.FirstOrDefault(n => n.Row == activePiece.Row && n.Column == activePiece.Column);
                    blackPawns.Remove(blackPawn);
                }
            }*/
        }

        //katero figuro je treba pojest
        if (IfWhiteFigureExists(row, column) && !whiteTurn)
        {
            var whitePiece = whitePieces.FirstOrDefault(n => n.Row == row && n.Column == column);
            if (whitePiece != null)
            {
                switch (whitePiece.Type)
                {
                    case PiecesData.Type.Pawn:
                        whitePawns.Remove(whitePiece);
                        break;
                    case PiecesData.Type.Rook:
                        whiteRooks.Remove(whitePiece);
                        break;
                    case PiecesData.Type.Bishop:
                        whiteBishops.Remove(whitePiece);
                        break;
                    case PiecesData.Type.Knight:
                        whiteKnights.Remove(whitePiece);
                        break;
                    case PiecesData.Type.Queen:
                        whiteQueen.Remove(whitePiece);
                        break;
                    //za zdaj lahko kralja pojes
                    case PiecesData.Type.King:
                        whiteKing.Remove(whitePiece);
                        break;
                }
                whitePieces.Remove(whitePiece);
            }
        }
        else if (IfBlackFigureExists(row, column) && whiteTurn)
        {
            var blackPiece = blackPieces.FirstOrDefault(n => n.Row == row && n.Column == column);

            if (blackPiece != null)
            {
                switch (blackPiece.Type)
                {
                    case PiecesData.Type.Pawn:
                        blackPawns.Remove(blackPiece);
                        break;
                    case PiecesData.Type.Rook:
                        blackRooks.Remove(blackPiece);
                        break;
                    case PiecesData.Type.Bishop:
                        blackBishops.Remove(blackPiece);
                        break;
                    case PiecesData.Type.Knight:
                        blackKnights.Remove(blackPiece);
                        break;
                    case PiecesData.Type.Queen:
                        blackQueen.Remove(blackPiece);
                        break;
                    //za zdaj lahko kralja pojes
                    case PiecesData.Type.King:
                        blackKing.Remove(blackPiece);
                        break;
                }
                blackPieces.Remove(blackPiece);
            }
        }

        // gledamo ce je mogoce narediti en passant
        if (activePiece1 != null)
        {
            if (activePiece1.Type == PiecesData.Type.Pawn)
            {
                if (row == activePiece1.Row + 2)
                {
                    whiteEnPassant = true;
                    blackEnPassant = false;
                    enPassantColumn = column;
                }
                else if (row == activePiece1.Row - 2)
                {
                    blackEnPassant = true;
                    whiteEnPassant = false;
                    enPassantColumn = column;
                }
                else
                {
                    blackEnPassant = false;
                    whiteEnPassant = false;
                    enPassantColumn = 10;
                }
            }
            else
            {
                whiteEnPassant = false;
                blackEnPassant = false;
                enPassantColumn = 10;
            }
        }

        // ce je kralj naredil premik za 2, pomeni da se bo izvedla rosada
        if (activePiece1.Type == PiecesData.Type.King)
        {
            if (activePiece1.Row == 7 && activePiece1.Column == 4 && row == activePiece1.Row && column == activePiece1.Column - 2)
            {
                canWhiteQueenSideCastle = false;
                canWhiteKingSideCastle = false;
                activePiece1 = whiteRooks[0];
                MovePiece(activePiece1.Row, activePiece1.Column + 3);
                activePiece1 = whiteKing[0];
                whiteTurn = !whiteTurn;
            }

            if (activePiece1.Row == 7 && activePiece1.Column == 4 && row == activePiece1.Row && column == activePiece1.Column + 2)
            {
                canWhiteQueenSideCastle = false;
                canWhiteKingSideCastle = false;
                activePiece1 = whiteRooks[1];
                MovePiece(activePiece1.Row, activePiece1.Column - 2);
                activePiece1 = whiteKing[0];
                whiteTurn = !whiteTurn;
            }

            if (activePiece1.Row == 0 && activePiece1.Column == 4 && row == activePiece1.Row && column == activePiece1.Column - 2)
            {
                canBlackQueenSideCastle = false;
                canBlackKingSideCastle = false;
                activePiece1 = blackRooks[0];
                MovePiece(activePiece1.Row, activePiece1.Column + 3);
                activePiece1 = blackKing[0];
                whiteTurn = !whiteTurn;
            }

            if (activePiece1.Row == 0 && activePiece1.Column == 4 && row == activePiece1.Row && column == activePiece1.Column + 2)
            {
                canBlackQueenSideCastle = false;
                canBlackKingSideCastle = false;
                activePiece1 = blackRooks[1];
                MovePiece(activePiece1.Row, activePiece1.Column - 2);
                activePiece1 = blackKing[0];
                whiteTurn = !whiteTurn;
            }
        }

        // preverjamo za premike kralja ali trdnjav za nastavljanje pogoja rosade
        if (canWhiteQueenSideCastle)
        {
            if ((activePiece1.Type == PiecesData.Type.Rook && (activePiece1.Row == 7 && activePiece1.Column == 0)) || (activePiece1.Type == PiecesData.Type.King && activePiece1.Row == 7 && activePiece1.Column == 4))
            {
                canWhiteQueenSideCastle = false;
            }
        }

        if (canWhiteKingSideCastle)
        {
            if ((activePiece1.Type == PiecesData.Type.Rook && (activePiece1.Row == 7 && activePiece1.Column == 7)) || (activePiece1.Type == PiecesData.Type.King && activePiece1.Row == 7 && activePiece1.Column == 4))
            {
                canWhiteKingSideCastle = false;
            }
        }

        if (canBlackQueenSideCastle)
        {
            if ((activePiece1.Type == PiecesData.Type.Rook && (activePiece1.Row == 0 && activePiece1.Column == 0)) || (activePiece1.Type == PiecesData.Type.King && activePiece1.Row == 0 && activePiece1.Column == 4))
            {
                canBlackQueenSideCastle = false;
            }
        }

        if (canBlackKingSideCastle)
        {
            if ((activePiece1.Type == PiecesData.Type.Rook && (activePiece1.Row == 0 && activePiece1.Column == 7)) || (activePiece1.Type == PiecesData.Type.King && activePiece1.Row == 0 && activePiece1.Column == 4))
            {
                canBlackKingSideCastle = false;
            }
        }

        //premik
        activePiece1.Column = column;
        activePiece1.Row = row;
        activePiece1 = null;
        whiteTurn = !whiteTurn;
        checkIfChess();
        CheckDirections(activePiece1);

        // ko igralec premakne figuro se ura ustavi in pricne odstevat nasprotniku
        if (!whiteTurn) {
            StartOrStopBlackTimer.InvokeAsync(null);
            if (moveCount > 0)
                StartOrStopWhiteTimer.InvokeAsync(null);
        } else {
            StartOrStopBlackTimer.InvokeAsync(null);
            StartOrStopWhiteTimer.InvokeAsync(null);
        }

        // funkcijo klicemo samo po prvem premiku
        if (moveCount == 0)
        {
            FirstMove.InvokeAsync(null);
        }

        moveCount++;
    }

    // funkcija se sprozi v datoteki Clock.razor ko potece cas
    bool isTimeUp = false;
    public void TimesUp()
    {
        isTimeUp = true;
    }

    void PieceClicked(PieceData piece)
    {
        if (isTimeUp)
        {
            while (true) {}
        }

        if (whiteTurn && piece.Color == black)
        {
            return;
        }
        if (!whiteTurn && piece.Color == white)
        {
            return;
        }

        if (activePiece1 == piece)
        {
            activePiece1 = null;
        }
        else
        {
            activePiece1 = piece;
        }

        CheckDirections(activePiece1);
        InvokeAsync(StateHasChanged);
    }

    void MoveInLine(int row, int column)
    {
        if ((!IfFigureExists(activePiece1.Row + row, activePiece1.Column + column)) || (IfBlackFigureExists(activePiece1.Row + row, activePiece1.Column + column) && whiteTurn) || (IfWhiteFigureExists(activePiece1.Row + row, activePiece1.Column + column) && !whiteTurn))
        {
            AddIfSameColorNotExists(activePiece1, activePiece1.Row + row, activePiece1.Column + column);
            if ((!IfFigureExists(activePiece1.Row + (row * 2), activePiece1.Column + (column * 2)) || (IfBlackFigureExists(activePiece1.Row + (row * 2), activePiece1.Column + (column * 2)) && whiteTurn) || (IfWhiteFigureExists(activePiece1.Row + (row * 2), activePiece1.Column + (column * 2)) && !whiteTurn)) && (activePiece1.Type != PiecesData.Type.King) && !IfFigureExists(activePiece1.Row + row, activePiece1.Column + column))
            {
                AddIfSameColorNotExists(activePiece1, activePiece1.Row + (row * 2), activePiece1.Column + (column * 2));
                if ((!IfFigureExists(activePiece1.Row + (row * 3), activePiece1.Column + (column * 3)) || (IfBlackFigureExists(activePiece1.Row + (row * 3), activePiece1.Column + (column * 3)) && whiteTurn) || (IfWhiteFigureExists(activePiece1.Row + (row * 3), activePiece1.Column + (column * 3)) && !whiteTurn)) && !IfFigureExists(activePiece1.Row + (row * 2), activePiece1.Column + (column * 2)))
                {
                    AddIfSameColorNotExists(activePiece1, activePiece1.Row + (row * 3), activePiece1.Column + (column * 3));
                    if ((!IfFigureExists(activePiece1.Row + (row * 4), activePiece1.Column + (column * 4)) || (IfBlackFigureExists(activePiece1.Row + (row * 4), activePiece1.Column + (column * 4)) && whiteTurn) || (IfWhiteFigureExists(activePiece1.Row + (row * 4), activePiece1.Column + (column * 4)) && !whiteTurn)) && !IfFigureExists(activePiece1.Row + (row * 3), activePiece1.Column + (column * 3)))
                    {
                        AddIfSameColorNotExists(activePiece1, activePiece1.Row + (row * 4), activePiece1.Column + (column * 4));
                        if ((!IfFigureExists(activePiece1.Row + (row * 5), activePiece1.Column + (column * 5)) || (IfBlackFigureExists(activePiece1.Row + (row * 5), activePiece1.Column + (column * 5)) && whiteTurn) || (IfWhiteFigureExists(activePiece1.Row + (row * 5), activePiece1.Column + (column * 5)) && !whiteTurn)) && !IfFigureExists(activePiece1.Row + (row * 4), activePiece1.Column + (column * 4)))
                        {
                            AddIfSameColorNotExists(activePiece1, activePiece1.Row + (row * 5), activePiece1.Column + (column * 5));
                            if ((!IfFigureExists(activePiece1.Row + (row * 6), activePiece1.Column + (column * 6)) || (IfBlackFigureExists(activePiece1.Row + (row * 6), activePiece1.Column + (column * 6)) && whiteTurn) || (IfWhiteFigureExists(activePiece1.Row + (row * 6), activePiece1.Column + (column * 6)) && !whiteTurn)) && !IfFigureExists(activePiece1.Row + (row * 5), activePiece1.Column + (column * 5)))
                            {
                                AddIfSameColorNotExists(activePiece1, activePiece1.Row + (row * 6), activePiece1.Column + (column * 6));
                                if ((!IfFigureExists(activePiece1.Row + (row * 7), activePiece1.Column + (column * 7)) || (IfBlackFigureExists(activePiece1.Row + (row * 7), activePiece1.Column + (column * 7)) && whiteTurn) || (IfWhiteFigureExists(activePiece1.Row + (row * 7), activePiece1.Column + (column * 7)) && !whiteTurn)) && !IfFigureExists(activePiece1.Row + (row * 6), activePiece1.Column + (column * 6)))
                                {
                                    AddIfSameColorNotExists(activePiece1, activePiece1.Row + (row * 7), activePiece1.Column + (column * 7));
                                }
                            }
                        }
                    }
                }
            }
        }
    }        
}
